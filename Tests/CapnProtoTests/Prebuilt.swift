import CapnProto
import Foundation
import Testing

/// Same as `capnp(schema:type:dynamic:)`, but uses prebuilt Cap'n Proto data (generated by
/// `prebuiltAreUpToDate()`). This is intended so that tests do not need to run `capnp`, although
/// for now they go through higher-level abstractions which do not make use of these prebuilt
/// messages.
func capnp(
  schema: StaticString,
  type: StaticString,
  _ contents: StaticString,
  file: StaticString = #filePath,
  line: Int = #line
) -> AnyPointer {
  let contents = normalizeString(contents.description[...])

  guard let words = prebuiltCapnp[contents] else {
    fatalError(
      "no prebuilt Cap'n Proto data found for \(file):\(line); did you run `CAPNPC_SWIFT_UPDATE_PREBUILT=1 swift test --filter prebuiltAreUpToDate`?"
    )
  }
  let message = Message(segmentWords: words)!

  return message.rootPointer
}

@Test
private func prebuiltAreUpToDate() async throws {
  let expectedText = try await withThrowingTaskGroup(of: (Substring, [CapnProto.Word]).self) {
    group in
    for filePath in try FileManager.default.subpathsOfDirectory(atPath: "Tests/CapnProtoTests")
    where filePath.hasSuffix(".swift") {
      let fileUrl = URL(fileURLWithPath: "Tests/CapnProtoTests/\(filePath)")
      let fileContents = try String(contentsOf: fileUrl, encoding: .utf8)

      for match in fileContents.matches(
        of:
          /\bcapnp\(\s*schema:\s+"(.*?)",\s+type:\s+"(.*?)",\s+(?:"""\n([\s\S]+?)"""|\s*"(.*?)")\s*\)/
      ) {
        let schema = match.output.1
        let type = match.output.2
        let contents = match.output.3 ?? match.output.4!

        group.addTask {
          (contents, try await capnp(schema: schema, type: type, dynamic: contents))
        }
      }
    }

    var mapEntries: [String] = []

    for try await (capnp, words) in group {
      var text = "    \(normalizeString(capnp).debugDescription): ["
      var prefix = ""

      for word in words {
        text.append("\(prefix)0x\(String(word, radix: 16))")
        prefix = ", "
      }

      text.append("],")
      mapEntries.append(text)
    }

    if mapEntries.isEmpty {
      mapEntries.append("  :")
    }

    return """

      package let prebuiltCapnp: [String: [CapnProto.Word]] = [
      \(mapEntries.sorted().joined(separator: "\n"))
      ]

      """
  }

  let thisFileText = try String(contentsOf: URL(fileURLWithPath: #filePath), encoding: .utf8)
  let actualTextStart = thisFileText.range(of: "\npackage let prebuiltCapnp")!.lowerBound
  let actualText = thisFileText[actualTextStart...]

  if getenv("CAPNPC_SWIFT_UPDATE_PREBUILT") == nil {
    try #require(expectedText == actualText)
  } else {
    if expectedText == actualText {
      return
    }

    let newText = thisFileText[..<actualTextStart] + expectedText

    try newText.write(to: URL(fileURLWithPath: #filePath), atomically: false, encoding: .utf8)
  }
}

private func normalizeString(_ string: Substring) -> String {
  string.trimmingCharacters(in: .whitespacesAndNewlines).replacing(/\n */, with: "")
}

// Code below is generated by `prebuiltAreUpToDate()` above.
// swift-format-ignore
package let prebuiltCapnp: [String: [CapnProto.Word]] = [
  :
]
